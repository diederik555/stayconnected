import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class FindLocation {

    public static void main(String[] args) throws IOException {

        Connection con = null;
        PreparedStatement pst = null;
        PreparedStatement pstr = null;
        ResultSet rst = null;
        ResultSet rs = null;
        Statement st = null;
        Statement del = null;

        String url = "jdbc:mysql://mysql11.cp.hostnet.nl:3306/db30984_stayc";
        String user = "u30984_fhd";
        String password = "stayconnected";
        
        List<String> cits = new ArrayList<String>();
        int counts = 0;
        
        try {
            con = DriverManager.getConnection(url, user, password);
            pst = con.prepareStatement("SELECT * FROM sortedDatabase");
            rs = pst.executeQuery();
            
            con.setAutoCommit(false);

            while (rs.next()) {
            	cits.clear();
            	String accountName = rs.getString(1);
                float latitude = Float.valueOf(rs.getString(3));
                float longitude = Float.valueOf(rs.getString(4));
                String sexs = rs.getString(6);
                int inputid = Integer.parseInt(rs.getString(7));
                
                pstr = con.prepareStatement("SELECT * FROM profiles WHERE accountName = '" + accountName + "'");
                rst = pstr.executeQuery();
                
	            if (rst.next()) {
                	String cities = rst.getString(4);
                    
                    URL link;
                	
                	link = new URL("http://maps.googleapis.com/maps/api/geocode/json?latlng="+latitude+","+longitude+"&sensor=false");
                	HttpURLConnection connection = (HttpURLConnection)link.openConnection();
                	connection.setRequestMethod("GET");
                	connection.connect();
                	
                	InputStream in = connection.getInputStream();
                	
                	String inputStreamString = new Scanner(in,"UTF-8").useDelimiter("\\A").next();
                	
                	String cit;
                	
                	cities = cities.substring(1, cities.length()-1);
                	String[] citss = cities.split(",");
                	for(String loc: citss) {
                		if(!cits.contains(loc)) {
                			cits.add(loc.trim());
                		}
                	}
                	
                	String[] locations = inputStreamString.split("\n");
                	int index = 1;
                	for(String loc: locations){
                		if(loc.contains("\"locality\", \"political\"")){
                			int lastindex = index - 3;
                			String[] city = locations[lastindex].split(":");
                			for(String locs: city) {
                				if(locs.contains("\",")) {
                					cit = locs.substring(2, locs.length()-2);
                					if(!cits.contains(cit)) {
                						System.out.println("new city found: " + cit);
                						cits.add(cit.trim());
                						cits.add("1".trim());
                					} else {
                						int i = cits.indexOf(cit);
                						System.out.println("cits: " + cits.get(i));
                						System.out.println("k: " + cits.get(i+1));
                						int k = Integer.parseInt(cits.get(i+1));
                						k++;
                						cits.set((i+1),String.valueOf(k));
                					}
                				}
                			}
                			break;
                		}
                		index++;
                	}
                	
                	if(cits.toString().startsWith("[, ")) {
                		cits.remove(0);
                	}
                	
                	int citsize = cits.size();
                	int curActivity = 0;
                	if(citsize <= 1)
                		curActivity = 0;
                	else if(citsize < 3)
                		curActivity = 1;
                	else if(citsize < 5)
                		curActivity = 2;
                	else if(citsize < 7)
                		curActivity = 3;
                	else
                		curActivity = 4;
                	
					
					con.setAutoCommit(false);
                    st = con.createStatement();
                	st.addBatch("UPDATE profiles set cities = '" + cits.toString() + "' WHERE accountName = '" + accountName + "'");
                	st.addBatch("UPDATE profiles set activity = '" + curActivity + "' WHERE accountName = '" + accountName + "'");
                	st.executeBatch();
                	counts++;
                	del = con.createStatement();
                	del.execute("DELETE FROM sortedDatabase WHERE inputid='" + inputid + "'");
                }
	            else {
                	String sex = sexs;
                	float activity = 0.0f;
                	URL link;
                	
                	link = new URL("http://maps.googleapis.com/maps/api/geocode/json?latlng="+latitude+","+longitude+"&sensor=false");
                	HttpURLConnection connection = (HttpURLConnection)link.openConnection();
                	connection.setRequestMethod("GET");
                	connection.connect();
                	
                	InputStream in = connection.getInputStream();
                	
                	String inputStreamString = new Scanner(in,"UTF-8").useDelimiter("\\A").next();
                	
                	String cit;
                	
                	String[] locations = inputStreamString.split("\n");
                	int index = 1;
                	for(String loc: locations){
                		if(loc.contains("\"locality\", \"political\"")){
                			int lastindex = index - 3;
                			String[] city = locations[lastindex].split(":");
                			for(String locs: city) {
                				if(locs.contains("\",")) {
                					cit = locs.substring(2, locs.length()-2);
                					if(!cits.contains(cit)) {
                						cits.add(cit.trim());
                						cits.add("1".trim());
                						System.out.println(cits);
                					}
                				}
                			}
                		}
                		index++;
                	}
                	
                	System.out.println("Creating new profile with account name: " + accountName);
                	
                	con.setAutoCommit(false);
                    st = con.createStatement();
                	st.addBatch("INSERT INTO profiles(accountName, sex, activity, cities) "+
                			"VALUES('"+accountName+"', '"+sex+"', '"+activity+"', '"+cits.toString()+"')");
                	st.executeBatch();
                	counts++;
                	del = con.createStatement();
                	del.execute("DELETE FROM sortedDatabase WHERE inputid='" + inputid + "'");
                }
            }

            con.commit();
            System.out.println(counts + " updates done!");
            
        } catch (SQLException ex) {
        	Logger lgr = Logger.getLogger(MySQLConnection.class.getName());
        	lgr.log(Level.SEVERE, ex.getMessage(), ex);
    	} 
        
        
        finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (st != null) {
                    st.close();
                }
                if (del != null) {
                    del.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(FindLocation.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }
    }
}
